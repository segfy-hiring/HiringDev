{"version":3,"sources":["components/Partials/Loading/loading.svg","components/YoutubeList/index.js","components/Partials/Loading/styled.js","components/Partials/Loading/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","YoutubeList","props","items","className","term","map","item","key","_id","src","thumbnail","alt","title","description","Moment","publishedAt","format","LoadingWrap","styled","div","Loading","icon","imgLoading","label","App","useState","isLoading","setIsLoading","YTList","setYTList","searchTerm","setSearchTerm","setTitle","query","a","fetch","json","then","res","catch","err","console","log","onSubmit","evt","preventDefault","fetchData","InputGroup","FormControl","placeholder","aria-label","aria-describedby","value","onChange","e","target","Append","Button","type","variant","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,qC,kPCiC5BC,EA3BK,SAACC,GAEjB,OACIA,EAAMC,MACN,oCACA,wBAAIC,UAAU,kCAAd,eAA4DF,EAAMG,MAClE,4BACKH,EAAMC,MAAMG,KAAI,SAAAC,GAAI,OACjB,yBAAKH,UAAU,UAAUI,IAAKD,EAAKE,KAC/B,yBAAKL,UAAU,YACX,yBAAKM,IAAKH,EAAKI,UAAWP,UAAU,oBAAoBQ,IAAKL,EAAKM,SAGtE,yBAAKT,UAAU,YACX,sCAAYG,EAAKM,OACjB,2CAAiBN,EAAKO,aACtB,yCAAeC,IAAOR,EAAKS,aAAaC,OAAO,sBAO7D,+B,wRC3BH,IAAMC,E,MAAcC,EAAOC,IAAV,K,iBCWTC,EATC,SAACnB,GACb,OACI,kBAACgB,EAAD,KACKhB,EAAMoB,MAAQ,yBAAKZ,IAAKa,IAAYX,IAAI,kBACxCV,EAAMsB,QCqDJC,EAnDH,SAACvB,GAAW,IAAD,EACawB,oBAAS,GADtB,mBACdC,EADc,KACHC,EADG,OAEOF,mBAAS,IAFhB,mBAEdG,EAFc,KAENC,EAFM,OAGeJ,mBAAS,IAHxB,mBAGdK,EAHc,KAGFC,EAHE,OAIKN,mBAAS,IAJd,mBAIdb,EAJc,KAIPoB,EAJO,iDAYrB,WAAyBC,GAAzB,SAAAC,EAAA,sEACoBC,MAAM,gBAAgBF,GAD1C,cAEMG,OACDC,MAAK,SAAAC,GAAG,OAAIT,EAAUS,KAAOX,GAAa,IAC1CY,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAJ9B,4CAZqB,sBAoBrB,OACE,yBAAKrC,UAAU,kBACX,yBAAKA,UAAU,OACf,0BAAMA,UAAU,QAAQwC,SAjBT,SAACC,GACpBA,EAAIC,iBACJlB,GAAa,GARM,oCASnBmB,CAAUhB,GACVE,EAASF,KAcL,kBAACiB,EAAA,EAAD,CAAY5C,UAAU,QACpB,kBAAC6C,EAAA,EAAD,CACEC,YAAY,oBACZC,aAAW,oBACXC,mBAAiB,eACjBC,MAAOtB,EACPuB,SAAU,SAAAC,GAAC,OAAIvB,EAAcuB,EAAEC,OAAOH,UAExC,kBAACL,EAAA,EAAWS,OAAZ,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAQ,qBAA9B,WAODjC,GACC,kBAAC,EAAD,CAASH,MAAM,0BAA0BF,MAAM,KAG/CK,GACQ,kBAAC,EAAD,CAAaxB,MAAO0B,EAAO1B,MAAOE,KAAMQ,MC3CxCgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.194b959f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.fb0e16bc.svg\";","import React from 'react';\r\nimport Moment from 'moment';\r\n\r\n\r\n\r\n\r\nconst YoutubeList = (props) => {\r\n    \r\n    return (\r\n        props.items ?\r\n        <>\r\n        <h2 className=\"text-center border-bottom mb-4\">Search for: {props.term}</h2>\r\n        <ul>\r\n            {props.items.map(item =>\r\n                <div className=\"row m-2\" key={item._id}>\r\n                    <div className=\"col-md-4\">\r\n                        <img src={item.thumbnail} className=\"img img-thumbnail\" alt={item.title} />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-8\">\r\n                        <h4>Title: {item.title}</h4>\r\n                        <p>Description: {item.description}</p>\r\n                        <p>Published: {Moment(item.publishedAt).format(\"DD/MM/YYYY\")}</p>\r\n                    </div>\r\n                \r\n                </div>\r\n            )}\r\n        </ul>\r\n        </>\r\n        : <div></div>\r\n    );\r\n}\r\n\r\nexport default YoutubeList;","import styled from 'styled-components'\r\n\r\nexport const LoadingWrap = styled.div`\r\n    margin: 30px 0 500px 0;\r\n    padding: 0 15px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-weight: 700;\r\n    color: #7f4ba2;\r\n\r\n    img {max-width: 60px;}\r\n`","import React from 'react'\r\nimport {LoadingWrap} from './styled'\r\nimport imgLoading from './loading.svg'\r\n\r\nconst Loading = (props) => {\r\n    return (\r\n        <LoadingWrap>\r\n            {props.icon && <img src={imgLoading} alt=\"Carregando...\" />}\r\n            {props.label}\r\n        </LoadingWrap>\r\n    )\r\n}\r\n\r\nexport default Loading","import React, {useState, useEffect} from 'react'\r\nimport './App.css';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport YoutubeList from './components/YoutubeList';\r\nimport Loading from './components/Partials/Loading';\r\n\r\n\r\n\r\nconst App = (props) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [YTList, setYTList] = useState([])\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [title, setTitle] = useState(\"\")\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    setIsLoading(true);\r\n    fetchData(searchTerm);\r\n    setTitle(searchTerm);\r\n}\r\n  async function fetchData(query) {\r\n    const res = await fetch(\"/api/Youtube/\"+query);\r\n    res.json()\r\n      .then(res => setYTList(res),  setIsLoading(false))\r\n      .catch(err => console.log(err));\r\n  }\r\n  \r\n  \r\n  return (\r\n    <div className=\"container mt-5\">\r\n        <div className=\"row\">\r\n        <form className=\"w-100\" onSubmit={handleSubmit}>\r\n        <InputGroup className=\"mb-3\">\r\n          <FormControl\r\n            placeholder=\"Search on Youtube\"\r\n            aria-label=\"Search on Youtube\"\r\n            aria-describedby=\"basic-addon2\"\r\n            value={searchTerm}\r\n            onChange={e => setSearchTerm(e.target.value)}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button type=\"submit\" variant=\"outline-secondary\">Go!</Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n        </form>\r\n        </div>\r\n        \r\n          \r\n          {isLoading &&\r\n            <Loading label=\"Loading, please wait ;)\" icon={true} />\r\n          }\r\n\r\n          {!isLoading &&\r\n                    <YoutubeList items={YTList.items} term={title} />\r\n          }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}