{"version":3,"sources":["components/Partials/Loading/loading.svg","components/YoutubeList/index.js","components/Partials/Loading/styled.js","components/Partials/Loading/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","YoutubeList","props","items","map","item","key","_id","title","LoadingWrap","styled","div","Loading","icon","src","imgLoading","alt","label","App","useState","isLoading","YTList","setYTList","setErrors","useEffect","a","fetch","json","then","res","catch","err","fetchData","className","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","Button","variant","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,qC,iOCgB5BC,EAdK,SAACC,GAEjB,OACIA,EAAMC,MACN,4BACKD,EAAMC,MAAMC,KAAI,SAAAC,GAAI,OACjB,wBAAIC,IAAKD,EAAKE,KAAMF,EAAKG,WAI/B,+B,wRCVH,IAAMC,E,MAAcC,EAAOC,IAAV,K,iBCWTC,EATC,SAACV,GACb,OACI,kBAACO,EAAD,KACKP,EAAMW,MAAQ,yBAAKC,IAAKC,IAAYC,IAAI,kBACxCd,EAAMe,QCsDJC,G,MAnDH,SAAChB,GAAW,IAAD,EACaiB,oBAAS,GADtB,mBACdC,EADc,aAEOD,mBAAS,KAFhB,mBAEdE,EAFc,KAENC,EAFM,OAGUH,oBAAS,GAHnB,mBAGJI,GAHI,WAsBrB,OAdAC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,sEACoBC,MAAM,YAD1B,cAEMC,OACDC,MAAK,SAAAC,GAAG,OAAIP,EAAUO,MACtBC,OAAM,SAAAC,GAAG,OAAIR,EAAUQ,MAJ5B,4CADc,uBAAC,WAAD,wBAQdC,KAEA,IAKA,yBAAKC,UAAU,kBAEX,yBAAKA,UAAU,OACf,kBAACC,EAAA,EAAD,CAAYD,UAAU,QACpB,kBAACE,EAAA,EAAD,CACEC,YAAY,oBACZC,aAAW,oBACXC,mBAAiB,iBAEnB,kBAACJ,EAAA,EAAWK,OAAZ,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,qBAAhB,UAKJ,yBAAKR,UAAU,OACZb,GACC,kBAAC,EAAD,CAASH,MAAM,8BAA8BJ,MAAM,KAGnDO,GACQ,kBAAC,EAAD,CAAajB,MAAOkB,QC3CpBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b4d0914.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.fb0e16bc.svg\";","import React from 'react';\r\n\r\nconst YoutubeList = (props) => {\r\n    //console.log(props.items)\r\n    return (\r\n        props.items ?\r\n        <ul>\r\n            {props.items.map(item =>\r\n                <li key={item._id}>{item.title}</li>\r\n            )}\r\n            \r\n        </ul>\r\n        : <div></div>\r\n    );\r\n}\r\n\r\nexport default YoutubeList;","import styled from 'styled-components'\r\n\r\nexport const LoadingWrap = styled.div`\r\n    margin: 30px 0 500px 0;\r\n    padding: 0 15px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-weight: 700;\r\n    color: #7f4ba2;\r\n\r\n    img {max-width: 60px;}\r\n`","import React from 'react'\r\nimport {LoadingWrap} from './styled'\r\nimport imgLoading from './loading.svg'\r\n\r\nconst Loading = (props) => {\r\n    return (\r\n        <LoadingWrap>\r\n            {props.icon && <img src={imgLoading} alt=\"Carregando...\" />}\r\n            {props.label}\r\n        </LoadingWrap>\r\n    )\r\n}\r\n\r\nexport default Loading","import React, {useState, useEffect} from 'react'\r\nimport './App.css';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport YoutubeList from './components/YoutubeList';\r\nimport Loading from './components/Partials/Loading';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst App = (props) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [YTList, setYTList] = useState([])\r\n  const [hasError, setErrors] =  useState(false)\r\n\r\n\r\n \r\n  \r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await fetch(\"/Youtube\");\r\n      res.json()\r\n        .then(res => setYTList(res))\r\n        .catch(err => setErrors(err));\r\n    }\r\n\r\n    fetchData();\r\n    \r\n  },[]);\r\n  //console.log(YTList);\r\n\r\n  \r\n  return (\r\n    <div className=\"container mt-5\">\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n        <div className=\"row\">\r\n        <InputGroup className=\"mb-3\">\r\n          <FormControl\r\n            placeholder=\"Search on Youtube\"\r\n            aria-label=\"Search on Youtube\"\r\n            aria-describedby=\"basic-addon2\"\r\n          />\r\n          <InputGroup.Append>\r\n            <Button variant=\"outline-secondary\">Go!</Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n        </div>\r\n        \r\n        <div className=\"row\">\r\n          {isLoading &&\r\n            <Loading label=\"Aguarde....Carregando lista\" icon={true} />\r\n          }\r\n\r\n          {!isLoading &&\r\n                    <YoutubeList items={YTList} />\r\n          }\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}